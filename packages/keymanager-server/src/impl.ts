import fs from "node:fs";
import path from "node:path";
import bls from "@chainsafe/bls";
import {Keystore} from "@chainsafe/bls-keystore";
import {
  Api,
  DeleteRemoteKeyStatus,
  DeletionStatus,
  ImportStatus,
  ResponseStatus,
  KeystoreStr,
  PubkeyHex,
  SlashingProtectionData,
  SignerDefinition,
  ImportRemoteKeyStatus,
} from "@chainsafe/lodestar-api/keymanager";
import {fromHexString} from "@chainsafe/ssz";
import {Interchange, SignerType, Validator} from "@chainsafe/lodestar-validator";
import {lockFilepath, unlockFilepath} from "./util/lockfile.js";

export const KEYSTORE_IMPORTED_PREFIX = "imported_keystore";

export type KeymanagerOpts = {
  /** Directory to persist imported keystores. Must not be the same as `importedRemoteKeysDirpath` */
  importedKeystoresDirpath: string;
  /** Directory to persist imported remote signers. Must not be the same as `importedKeystoresDirpath` */
  importedRemoteKeysDirpath: string;
};

export class KeymanagerApi implements Api {
  constructor(private readonly validator: Validator, private readonly opts: KeymanagerOpts) {
    for (const dirpath of [opts.importedKeystoresDirpath, opts.importedRemoteKeysDirpath]) {
      if (fs.existsSync(dirpath)) {
        // Ensure is directory
        if (!fs.statSync(dirpath).isDirectory()) {
          throw Error(`${dirpath} must be a directory`);
        }
      } else {
        // Or, create empty directory
        fs.mkdirSync(dirpath, {recursive: true});
      }
    }
  }

  /**
   * List all validating pubkeys known to and decrypted by this keymanager binary
   *
   * https://github.com/ethereum/keymanager-APIs/blob/0c975dae2ac6053c8245ebdb6a9f27c2f114f407/keymanager-oapi.yaml
   */
  async listKeys(): ReturnType<Api["listKeys"]> {
    const pubkeys = this.validator.validatorStore.votingPubkeys();
    return {
      data: pubkeys.map((pubkey) => ({
        validatingPubkey: pubkey,
        derivationPath: "",
        readonly: this.validator.validatorStore.getSigner(pubkey)?.type !== SignerType.Local,
      })),
    };
  }

  /**
   * Import keystores generated by the Eth2.0 deposit CLI tooling. `passwords[i]` must unlock `keystores[i]`.
   *
   * Users SHOULD send slashing_protection data associated with the imported pubkeys. MUST follow the format defined in
   * EIP-3076: Slashing Protection Interchange Format.
   *
   * @param keystoresStr JSON-encoded keystore files generated with the Launchpad
   * @param passwords Passwords to unlock imported keystore files. `passwords[i]` must unlock `keystores[i]`
   * @param slashingProtectionStr Slashing protection data for some of the keys of `keystores`
   * @returns Status result of each `request.keystores` with same length and order of `request.keystores`
   *
   * https://github.com/ethereum/keymanager-APIs/blob/0c975dae2ac6053c8245ebdb6a9f27c2f114f407/keymanager-oapi.yaml
   */
  async importKeystores(
    keystoresStr: KeystoreStr[],
    passwords: string[],
    slashingProtectionStr: SlashingProtectionData
  ): ReturnType<Api["importKeystores"]> {
    // The arguments to this function is passed in within the body of an HTTP request
    // hence fastify will parse it into an object before this function is called.
    // Even though the slashingProtectionStr is typed as SlashingProtectionData,
    // at runtime, when the handler for the request is selected, it would see slashingProtectionStr
    // as an object, hence trying to parse it using JSON.parse won't work. Instead, we cast straight to Interchange
    const interchange = (slashingProtectionStr as unknown) as Interchange;
    await this.validator.importInterchange(interchange);

    const statuses: {status: ImportStatus; message?: string}[] = [];

    for (let i = 0; i < keystoresStr.length; i++) {
      try {
        const keystoreStr = keystoresStr[i];
        const password = passwords[i];
        if (password === undefined) {
          throw Error(`No password for keystores[${i}]`);
        }

        const keystore = Keystore.parse(keystoreStr);

        // Check for duplicates and skip keystore before decrypting
        if (this.validator.validatorStore.hasVotingPubkey(keystore.pubkey)) {
          statuses[i] = {status: ImportStatus.duplicate};
          continue;
        }

        const secretKey = bls.SecretKey.fromBytes(await keystore.decrypt(password));
        const pubKey = secretKey.toPublicKey().toHex();
        this.validator.validatorStore.addSigner({type: SignerType.Local, secretKey});

        const keystoreFilepath = this.getKeystoreFilepath(pubKey);

        // Lock before writing keystore
        lockFilepath(keystoreFilepath);

        // Persist keys for latter restarts, directory of `keystoreFilepath` is created in the constructor
        await fs.promises.writeFile(keystoreFilepath, keystoreStr, {encoding: "utf8"});

        statuses[i] = {status: ImportStatus.imported};
      } catch (e) {
        statuses[i] = {status: ImportStatus.error, message: (e as Error).message};
      }
    }

    return {data: statuses};
  }

  /**
   * DELETE must delete all keys from `request.pubkeys` that are known to the keymanager and exist in its
   * persistent storage. Additionally, DELETE must fetch the slashing protection data for the requested keys from
   * persistent storage, which must be retained (and not deleted) after the response has been sent. Therefore in the
   * case of two identical delete requests being made, both will have access to slashing protection data.
   *
   * In a single atomic sequential operation the keymanager must:
   * 1. Guarantee that key(s) can not produce any more signature; only then
   * 2. Delete key(s) and serialize its associated slashing protection data
   *
   * DELETE should never return a 404 response, even if all pubkeys from request.pubkeys have no extant keystores
   * nor slashing protection data.
   *
   * Slashing protection data must only be returned for keys from `request.pubkeys` for which a
   * `deleted` or `not_active` status is returned.
   *
   * @param pubkeysHex List of public keys to delete.
   * @returns Deletion status of all keys in `request.pubkeys` in the same order.
   *
   * https://github.com/ethereum/keymanager-APIs/blob/0c975dae2ac6053c8245ebdb6a9f27c2f114f407/keymanager-oapi.yaml
   */
  async deleteKeystores(pubkeysHex: PubkeyHex[]): ReturnType<Api["deleteKeystores"]> {
    const deletedKey: boolean[] = [];
    const statuses = new Array<{status: DeletionStatus; message?: string}>(pubkeysHex.length);

    for (let i = 0; i < pubkeysHex.length; i++) {
      try {
        const pubkeyHex = pubkeysHex[i];

        // Skip unknown keys or remote signers
        const signer = this.validator.validatorStore.getSigner(pubkeyHex);
        if (!signer || signer?.type === SignerType.Remote) {
          continue;
        }

        // Remove key from live local signer
        deletedKey[i] = signer?.type === SignerType.Local && this.validator.validatorStore.removeSigner(pubkeyHex);

        // Remove key from blockduties
        // Remove from attestation duties
        // Remove from Sync committee duties
        // Remove from indices
        this.validator.removeDutiesForKey(pubkeyHex);

        const keystoreFilepath = this.getKeystoreFilepath(pubkeyHex);

        // Remove key from persistent storage
        fs.unlinkSync(keystoreFilepath);

        // Unlock last
        unlockFilepath(keystoreFilepath);
      } catch (e) {
        statuses[i] = {status: DeletionStatus.error, message: (e as Error).message};
      }
    }

    const pubkeysBytes = pubkeysHex.map((pubkeyHex) => fromHexString(pubkeyHex));

    const interchangeV5 = await this.validator.exportInterchange(pubkeysBytes, {
      version: "5",
    });

    // After exporting slashing protection data in bulk, render the status
    const pubkeysWithSlashingProtectionData = new Set(interchangeV5.data.map((data) => data.pubkey));
    for (let i = 0; i < pubkeysHex.length; i++) {
      if (statuses[i]?.status === DeletionStatus.error) {
        continue;
      }
      const status = deletedKey[i]
        ? DeletionStatus.deleted
        : pubkeysWithSlashingProtectionData.has(pubkeysHex[i])
        ? DeletionStatus.not_active
        : DeletionStatus.not_found;
      statuses[i] = {status};
    }

    return {
      data: statuses,
      slashingProtection: JSON.stringify(interchangeV5),
    };
  }

  /**
   * List all remote validating pubkeys known to this validator client binary
   */
  async listRemoteKeys(): ReturnType<Api["listRemoteKeys"]> {
    const remoteKeys: SignerDefinition[] = [];

    for (const pubkeyHex of this.validator.validatorStore.votingPubkeys()) {
      const signer = this.validator.validatorStore.getSigner(pubkeyHex);
      if (signer && signer.type === SignerType.Remote) {
        remoteKeys.push({
          pubkey: signer.pubkeyHex,
          url: signer.externalSignerUrl,
          readonly: false,
        });
      }
    }

    return {
      data: remoteKeys,
    };
  }

  /**
   * Import remote keys for the validator client to request duties for
   */
  async importRemoteKeys(remoteSigners: SignerDefinition[]): ReturnType<Api["importRemoteKeys"]> {
    const results = remoteSigners.map(
      (remoteSigner): ResponseStatus<ImportRemoteKeyStatus> => {
        // Check if key exists
        if (this.validator.validatorStore.hasVotingPubkey(remoteSigner.pubkey)) {
          return {status: ImportRemoteKeyStatus.duplicate};
        }

        // Else try to add it
        try {
          this.validator.validatorStore.addSigner({
            type: SignerType.Remote,
            pubkeyHex: remoteSigner.pubkey,
            externalSignerUrl: remoteSigner.url,
          });

          const remoteKeyFilepath = this.getRemoteKeyFilepath(remoteSigner.pubkey);
          writeRemoteSignerDefinition(remoteKeyFilepath, remoteSigner);

          return {status: ImportRemoteKeyStatus.imported};
        } catch (e) {
          return {status: ImportRemoteKeyStatus.error, message: (e as Error).message};
        }
      }
    );

    return {
      data: results,
    };
  }

  /**
   * DELETE must delete all keys from `request.pubkeys` that are known to the validator client and exist in its
   * persistent storage.
   * DELETE should never return a 404 response, even if all pubkeys from request.pubkeys have no existing keystores.
   */
  async deleteRemoteKeys(pubkeys: PubkeyHex[]): ReturnType<Api["deleteRemoteKeys"]> {
    const results = pubkeys.map(
      (pubkey): ResponseStatus<DeleteRemoteKeyStatus> => {
        // Check if key exists
        const found = this.validator.validatorStore.removeSigner(pubkey);

        if (!found) {
          return {status: DeleteRemoteKeyStatus.not_found};
        }

        try {
          const remoteKeyFilepath = this.getRemoteKeyFilepath(pubkey);
          fs.unlinkSync(remoteKeyFilepath);

          return {status: DeleteRemoteKeyStatus.deleted};
        } catch (e) {
          // TODO: Consider checking for e.code === "ENOENT" and return not_found
          // However currently not doing so, because it's an error of inconsistency if a known key is not in disk
          return {status: DeleteRemoteKeyStatus.error, message: (e as Error).message};
        }
      }
    );

    return {
      data: results,
    };
  }

  private getKeystoreFilepath(pubkeyHex: string): string {
    return path.join(this.opts.importedKeystoresDirpath, `${KEYSTORE_IMPORTED_PREFIX}_${pubkeyHex}.json`);
  }

  private getRemoteKeyFilepath(pubkeyHex: string): string {
    return path.join(this.opts.importedRemoteKeysDirpath, `${pubkeyHex}.json`);
  }
}

/**
 * Read all RemoteSigner definition files from a `importedRemoteKeysDirpath`
 */
export function readRemoteSignerDefinitions(dirpath: string): SignerDefinition[] {
  return fs
    .readdirSync(dirpath)
    .filter((filename) => filename.endsWith(".json"))
    .map((filename) => readRemoteSignerDefinition(path.join(dirpath, filename)));
}

/**
 * Validate SignerDefinition from un-trusted disk file.
 * Performs type validation and re-maps only expected properties.
 */
export function readRemoteSignerDefinition(filepath: string): SignerDefinition {
  const remoteSignerStr = fs.readFileSync(filepath, "utf8");
  const remoteSignerJson = JSON.parse(remoteSignerStr) as SignerDefinition;
  if (typeof remoteSignerJson.pubkey !== "string") throw Error(`invalid SignerDefinition.pubkey ${filepath}`);
  if (typeof remoteSignerJson.url !== "string") throw Error(`invalid SignerDefinition.url ${filepath}`);
  return {
    pubkey: remoteSignerJson.pubkey,
    url: remoteSignerJson.url,
    readonly: false,
  };
}

/**
 * Re-map all properties to ensure they are defined.
 * To just write `remoteSigner` is not safe since it may contain extra properties too.
 */
export function writeRemoteSignerDefinition(filepath: string, remoteSigner: SignerDefinition): void {
  const remoteSignerJson: SignerDefinition = {
    pubkey: remoteSigner.pubkey,
    url: remoteSigner.url,
    readonly: false,
  };
  fs.writeFileSync(filepath, JSON.stringify(remoteSignerJson));
}
